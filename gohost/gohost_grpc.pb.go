// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gohost

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoHostClient is the client API for GoHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoHostClient interface {
	IsAlive(ctx context.Context, in *AliveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type goHostClient struct {
	cc grpc.ClientConnInterface
}

func NewGoHostClient(cc grpc.ClientConnInterface) GoHostClient {
	return &goHostClient{cc}
}

func (c *goHostClient) IsAlive(ctx context.Context, in *AliveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gohost.GoHost/IsAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoHostServer is the server API for GoHost service.
// All implementations must embed UnimplementedGoHostServer
// for forward compatibility
type GoHostServer interface {
	IsAlive(context.Context, *AliveRequest) (*empty.Empty, error)
	mustEmbedUnimplementedGoHostServer()
}

// UnimplementedGoHostServer must be embedded to have forward compatible implementations.
type UnimplementedGoHostServer struct {
}

func (UnimplementedGoHostServer) IsAlive(context.Context, *AliveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAlive not implemented")
}
func (UnimplementedGoHostServer) mustEmbedUnimplementedGoHostServer() {}

// UnsafeGoHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoHostServer will
// result in compilation errors.
type UnsafeGoHostServer interface {
	mustEmbedUnimplementedGoHostServer()
}

func RegisterGoHostServer(s grpc.ServiceRegistrar, srv GoHostServer) {
	s.RegisterService(&GoHost_ServiceDesc, srv)
}

func _GoHost_IsAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoHostServer).IsAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gohost.GoHost/IsAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoHostServer).IsAlive(ctx, req.(*AliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoHost_ServiceDesc is the grpc.ServiceDesc for GoHost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoHost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gohost.GoHost",
	HandlerType: (*GoHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAlive",
			Handler:    _GoHost_IsAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gohost/gohost.proto",
}
